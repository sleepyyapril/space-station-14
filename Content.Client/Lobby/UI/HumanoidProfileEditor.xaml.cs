using System.Linq;
using Content.Client.Sprite;
using Content.Shared.CCVar;
using Content.Shared.Guidebook;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;

namespace Content.Client.Lobby.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class HumanoidProfileEditor : BoxContainer
    {
        private readonly IClientPreferencesManager _preferencesManager;
        private readonly IConfigurationManager _cfgManager;
        private readonly IEntityManager _entManager;

        /// <summary>
        /// Event that attempts to open a specific guidebook entry.
        /// </summary>
        public event Action<List<ProtoId<GuideEntryPrototype>>>? OnOpenGuidebook;

        // CCvar.
        private bool _allowFlavorText;

        private bool _imaging;

        /// <summary>
        /// If we're attempting to save.
        /// </summary>
        public event Action? Save;

        /// <summary>
        /// The character slot for the current profile.
        /// </summary>
        public int? CharacterSlot;

        /// <summary>
        /// The work in progress profile being edited.
        /// </summary>
        public HumanoidCharacterProfile? Profile;

        /// <summary>
        /// Whether or not the active profile is different from the saved character profile.
        /// This is used to determine whether the save and reset buttons are enabled or not.
        /// </summary>
        public bool IsDirty => ProfileButtons.IsDirty;

        public HumanoidProfileEditor(
            IClientPreferencesManager preferencesManager,
            IConfigurationManager configurationManager,
            IEntityManager entManager)
        {
            RobustXamlLoader.Load(this);
            _cfgManager = configurationManager;
            _entManager = entManager;
            _preferencesManager = preferencesManager;

            _allowFlavorText = _cfgManager.GetCVar(CCVars.FlavorText);

            // NAME / RANDOMIZE BUTTONS

            NameBox.OnNameSet += profile =>
            {
                if (ProfileButtons.IsDirty)
                    CharacterPreview.SetName(profile.Name);

                SyncProfileDirty(profile);
            };

            NameBox.OnRandomizeEverything += () =>
            {
                Profile = HumanoidCharacterProfile.Random();
                SetProfile(Profile, CharacterSlot);
            };

            // PROFILE BUTTONS

            ProfileButtons.OnSaved += () => { Save?.Invoke(); };
            ProfileButtons.OnReset += ResetToDefault;
            ProfileButtons.OnProfileImported += ImportProfile;
            ProfileButtons.OnExportImage += ExportImage;

            // APPEARANCE TAB

            TabContainer.SetTabTitle(0, Loc.GetString("humanoid-profile-editor-appearance-tab"));
            AppearanceTab.OnProfileUpdated += SyncProfile;

            AppearanceTab.OnShowClothes += show =>
            {
                CharacterPreview.ShowClothes = show;
                ReloadPreview();
            };

            AppearanceTab.OnSkinColorUpdated += profile =>
            {
                MarkingsTab.SetSkinColor(profile.Appearance.SkinColor);
                SyncProfilePreview(profile);
            };

            AppearanceTab.OnEyeColorUpdated += profile =>
            {
                MarkingsTab.SetEyeColor(profile.Appearance.EyeColor);
                SyncProfilePreview(profile);
            };

            AppearanceTab.OnHairUpdated += profile =>
            {
                MarkingsTab.SetProfile(profile);
                MarkingsTab.UpdateHair();
                SyncProfilePreview(profile);
            };

            AppearanceTab.OnFacialHairUpdated += profile =>
            {
                MarkingsTab.SetProfile(profile);
                MarkingsTab.UpdateFacialHair();
                SyncProfilePreview(profile);
            };

            AppearanceTab.OnSpeciesUpdated += profile =>
            {
                MarkingsTab.SetSpecies(profile.Species);
                RefreshJobs();
                RefreshLoadouts();
                SyncProfile(profile);
            };

            AppearanceTab.OnSexUpdated += profile =>
            {
                MarkingsTab.SetSex(profile.Sex);
                SyncProfilePreview(profile);
            };

            AppearanceTab.OnDirtyUpdated += SyncProfileDirty;
            AppearanceTab.OnOpenGuidebook += args => { OnOpenGuidebook?.Invoke(args); };

            // JOBS TAB

            TabContainer.SetTabTitle(1, Loc.GetString("humanoid-profile-editor-jobs-tab"));
            JobsTab.OnProfileUpdated += SyncProfileDirty;
            JobsTab.OnJobUpdated += SyncProfile;
            JobsTab.OnJobOverride += job =>
            {
                CharacterPreview.JobOverride = job;
                ReloadPreview();
            };

            JobsTab.OnOpenGuidebook += args => { OnOpenGuidebook?.Invoke(args); };

            RefreshJobs();

            // ANTAGS TAB

            TabContainer.SetTabTitle(2, Loc.GetString("humanoid-profile-editor-antags-tab"));
            AntagsTab.OnAntagsUpdated += SyncProfileDirty;
            AntagsTab.OnOpenGuidebook += args => { OnOpenGuidebook?.Invoke(args); };
            RefreshAntags();

            // TRAITS TAB

            TabContainer.SetTabTitle(3, Loc.GetString("humanoid-profile-editor-traits-tab"));
            TraitsTab.OnTraitSelected += SyncProfileDirty;
            RefreshTraits();

            // MARKINGS TAB

            TabContainer.SetTabTitle(4, Loc.GetString("humanoid-profile-editor-markings-tab"));

            MarkingsTab.OnMarkingAdded += OnMarkingChange;
            MarkingsTab.OnMarkingRemoved += OnMarkingChange;
            MarkingsTab.OnMarkingColorChange += OnMarkingChange;
            MarkingsTab.OnMarkingRankChange += OnMarkingChange;

            // FLAVOR TEXT TAB

            TabContainer.SetTabTitle(5, Loc.GetString("humanoid-profile-editor-flavortext-tab"));
            FlavorTextTab.OnFlavorTextChanged += profile =>
            {
                if (_allowFlavorText)
                    SyncProfileDirty(profile);
            };

            RefreshFlavorText();
        }

        protected override void EnteredTree()
        {
            base.EnteredTree();
            ReloadPreview();
        }

        /// <summary>
        /// Refreshes the flavor text editor status.
        /// </summary>
        public void RefreshFlavorText()
        {
            if (_allowFlavorText == FlavorTextTab.Enabled)
                return;

            FlavorTextTab.Enabled = _allowFlavorText;
            TabContainer.SetTabVisible(tab: 5, visible: FlavorTextTab.Enabled);
        }

        /// <summary>
        /// Refreshes the trait list.
        /// </summary>
        public void RefreshTraits()
        {
            TraitsTab.RefreshTraits();
        }

        /// <summary>
        /// Refreshes the species selector dropdown.
        /// </summary>
        public void RefreshSpecies()
        {
            AppearanceTab.RefreshSpecies();
        }

        /// <summary>
        /// Refreshes all antagonist preference selectors.
        /// </summary>
        public void RefreshAntags()
        {
            AntagsTab.RefreshAntags();
        }

        /// <summary>
        /// Refreshes all loadouts.
        /// </summary>
        public void RefreshLoadouts()
        {
            JobsTab.RefreshLoadouts();
        }

        /// <summary>
        /// Refreshes all job priority selectors.
        /// </summary>
        public void RefreshJobs()
        {
            JobsTab.RefreshJobs();
        }

        private void SetDirty()
        {
            // If it equals default then reset the button.
            if (Profile == null || _preferencesManager.Preferences?.SelectedCharacter.MemberwiseEquals(Profile) == true)
            {
                ProfileButtons.IsDirty = false;
                return;
            }

            // TODO: Check if profile matches default.
            ProfileButtons.IsDirty = true;
        }

        /// <summary>
        /// Reloads the entire dummy entity for preview.
        /// </summary>
        /// <remarks>
        /// This function is expensive because it has to delete and recreate the preview entity entirely. Do not use
        /// this for slider updates because it will lag like crazy. This function should only be used for when the
        /// preview entity needs to change prototypes. For example, changing species uses this function
        /// because different species dummies have different prototypes and components.
        /// </remarks>
        private void ReloadPreview()
        {
            CharacterPreview.SetProfile(Profile);
            CharacterPreview.ReloadPreview();
            SetDirty();
        }

        /// <summary>
        /// Reloads the appearance of the dummy entity.
        /// </summary>
        /// <remarks>
        /// This function is much cheaper than <see cref="ReloadPreview"/>, because it only updates the dummy's
        /// appearance (LoadProfile). Great for updating markings and color sliders, including hair and facial hair.
        /// </remarks>
        private void ReloadProfilePreview()
        {
            CharacterPreview.SetProfile(Profile);
            CharacterPreview.ReloadProfilePreview();
            SetDirty();
        }

        // Callback functions for updating the profile without needing to update the entire character.

        /// <summary>
        ///     Sets the current profile and calls for a refresh of the preview entity.
        ///     Also calls <see cref="SetDirty"/>; See <see cref="ReloadPreview"/>. Good for prototype changes.
        /// </summary>
        /// <param name="profile">The profile to sync to.</param>
        private void SyncProfile(HumanoidCharacterProfile? profile)
        {
            Profile = profile;
            ReloadPreview();
        }

        /// <summary>
        ///     Sets the current profile and calls for a reload of the preview entity's appearance only.
        ///     Also calls <see cref="SetDirty"/>; See <see cref="ReloadProfilePreview"/>. Good for markings.
        /// </summary>
        /// <param name="profile"></param>
        private void SyncProfilePreview(HumanoidCharacterProfile? profile)
        {
            Profile = profile;
            ReloadProfilePreview();
        }

        /// <summary>
        ///     Sets the current profile and calls for an update of the save/reset buttons.
        ///     See <see cref="SetDirty"/>. Good for anything that does not affect the base appearance of the character,
        ///     such as age, traits, or antag preferences.
        /// </summary>
        /// <param name="profile"></param>
        private void SyncProfileDirty(HumanoidCharacterProfile? profile)
        {
            Profile = profile;
            SetDirty();
        }

        /// <summary>
        /// Sets the editor to the specified profile with the specified slot.
        /// </summary>
        public void SetProfile(HumanoidCharacterProfile? profile, int? slot)
        {
            Profile = profile?.Clone();
            CharacterSlot = slot;

            CharacterPreview.JobOverride = null;

            NameBox.SetProfile(Profile);
            ProfileButtons.SetProfile(Profile);
            ProfileButtons.IsDirty = false;

            AppearanceTab.SetProfile(Profile);
            JobsTab.SetProfile(Profile);
            AntagsTab.SetProfile(Profile);
            TraitsTab.SetProfile(Profile);
            MarkingsTab.SetProfile(Profile);
            FlavorTextTab.SetProfile(Profile);

            MarkingsTab.UpdateProfile();
            RefreshFlavorText();
            ReloadPreview();
        }

        /// <summary>
        /// Resets the profile to the defaults.
        /// </summary>
        private void ResetToDefault()
        {
            var selectedCharacter = (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter;
            var selectedIndex = _preferencesManager.Preferences?.SelectedCharacterIndex;

            SetProfile(selectedCharacter, selectedIndex);
        }

        private void OnMarkingChange(MarkingSet markings)
        {
            if (Profile is null)
                return;

            var appearance = Profile.Appearance.WithMarkings(markings.GetForwardEnumerator().ToList());
            Profile = Profile.WithCharacterAppearance(appearance);
            ReloadProfilePreview();
        }

        private void ImportProfile(HumanoidCharacterProfile profile)
        {
            if (CharacterSlot is null)
                return;

            var oldProfile = Profile;
            SetProfile(profile, CharacterSlot);

            if (oldProfile is not null)
                ProfileButtons.IsDirty = !profile.MemberwiseEquals(oldProfile);
        }

        private async void ExportImage()
        {
            if (_imaging)
                return;

            var dir = CharacterPreview.PreviewRotation;

            _imaging = true;
            await _entManager.System<ContentSpriteSystem>().Export(entity: CharacterPreview.PreviewDummy,
                direction: dir,
                includeId: false);

            _imaging = false;
        }
    }
}
