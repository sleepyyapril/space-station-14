using Content.Client.Lobby.UI.Roles;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.Guidebook;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

#pragma warning disable IDE1006
namespace Content.Client.Lobby.UI.CharacterEditor;
#pragma warning restore IDE1006

[GenerateTypedNameReferences]
public sealed partial class AntagPreferenceButtons : BoxContainer
{
    private readonly JobRequirementsManager _requirements;

    public event Action<int>? OnPreferenceSelected;
    public event Action<List<ProtoId<GuideEntryPrototype>>>? OnOpenGuidebook;

    // TODO: Unused. Possibly add antag loadouts
    public event Action? OnOpenLoadout;

    private const int MinTitleWidth = 250;
    private const int DisabledValue = 1;

    public AntagPreferenceButtons(JobRequirementsManager requirements)
    {
        RobustXamlLoader.Load(this);

        _requirements = requirements;

        PreferenceSelector.OnOpenGuidebook += args => { OnOpenGuidebook?.Invoke(args); };
        PreferenceSelector.OnSelected += selected => { OnPreferenceSelected?.Invoke(selected); };
    }

    public void Setup(AntagPrototype antag,
        (string, int)[] items,
        HumanoidCharacterProfile? selectedProfile,
        bool hasLoadout = false)
    {

        var title = Loc.GetString(antag.Name);
        var description = Loc.GetString(antag.Objective);
        PreferenceSelector.Setup(items: items,
            title: title,
            titleSize: MinTitleWidth,
            description: description,
            guides: antag.Guides);

        var locked = !_requirements.IsAllowed(antag, selectedProfile, out var reason);
        SetLocked(locked, reason);

        LoadoutButton.Disabled = !hasLoadout;
        LoadoutButton.OnPressed += args => { OnOpenLoadout?.Invoke(); };
    }

    public void SetLocked(bool locked, FormattedMessage? requirements = null)
    {
        if (locked)
        {
            if (requirements is not null)
                PreferenceSelector.LockRequirements(requirements);
            OnPreferenceSelected?.Invoke(DisabledValue);
        }
        else
            PreferenceSelector.UnlockRequirements();
    }

    public void Select(int option)
    {
        PreferenceSelector.Select(option);
    }
}
