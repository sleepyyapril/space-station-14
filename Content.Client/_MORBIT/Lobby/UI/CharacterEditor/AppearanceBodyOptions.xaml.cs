using System.Linq;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

#pragma warning disable IDE1006
namespace Content.Client._MORBIT.Lobby.UI.CharacterEditor;
#pragma warning restore IDE1006

[GenerateTypedNameReferences]
public sealed partial class AppearanceBodyOptions : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly MarkingManager _markingManager = default!;

    public event Action<HumanoidCharacterProfile>? OnSkinColorUpdated;
    public event Action<HumanoidCharacterProfile>? OnEyeColorUpdated;
    public event Action<HumanoidCharacterProfile>? OnHairUpdated;
    public event Action<HumanoidCharacterProfile>? OnFacialHairUpdated;

    private ColorSelectorSliders _rgbSkinColorSelector;

    /// <summary>
    /// The work in progress profile being edited.
    /// </summary>
    private HumanoidCharacterProfile? _profile;

    private const int HairSlots = 1;

    public AppearanceBodyOptions()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        RgbSkinColorContainer.AddChild(_rgbSkinColorSelector = new ColorSelectorSliders());
        _rgbSkinColorSelector.SelectorType = ColorSelectorSliders.ColorSelectorType.Hsv;
        _rgbSkinColorSelector.OnColorChanged += _ => { OnSkinColorOnValueChanged(); };
        Skin.OnValueChanged += _ => { OnSkinColorOnValueChanged(); };

        HairStylePicker.OnMarkingSelect += newStyle =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(
                _profile.Appearance.WithHairStyleName(newStyle.id));

            OnHairUpdated?.Invoke(_profile);
        };

        HairStylePicker.OnColorChanged += newColor =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(_profile.Appearance
                .WithHairColor(newColor.marking.MarkingColors[0]));

            OnHairUpdated?.Invoke(_profile);
        };

        HairStylePicker.OnSlotRemove += _ =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(
                _profile.Appearance.WithHairStyleName(HairStyles.DefaultHairStyle)
            );

            UpdateHairPickers();
            OnHairUpdated?.Invoke(_profile);
        };

        HairStylePicker.OnSlotAdd += delegate ()
        {
            if (_profile is null)
                return;

            var hair = _markingManager
                .MarkingsByCategoryAndSpecies(MarkingCategories.Hair, _profile.Species).Keys
                .FirstOrDefault();

            if (string.IsNullOrEmpty(hair))
                return;

            _profile = _profile.WithCharacterAppearance(_profile.Appearance.WithHairStyleName(hair));
            UpdateHairPickers();
            OnHairUpdated?.Invoke(_profile);
        };

        FacialHairPicker.OnMarkingSelect += newStyle =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(
                _profile.Appearance.WithFacialHairStyleName(newStyle.id));

            OnFacialHairUpdated?.Invoke(_profile);
        };

        FacialHairPicker.OnColorChanged += newColor =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(
                _profile.Appearance.WithFacialHairColor(newColor.marking.MarkingColors[0]));

            OnFacialHairUpdated?.Invoke(_profile);
        };

        FacialHairPicker.OnSlotRemove += _ =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(_profile.Appearance
                .WithFacialHairStyleName(HairStyles.DefaultFacialHairStyle));
            UpdateHairPickers();
            OnFacialHairUpdated?.Invoke(_profile);
        };

        FacialHairPicker.OnSlotAdd += delegate ()
        {
            if (_profile is null)
                return;

            var hair = _markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.FacialHair, _profile.Species).Keys
                .FirstOrDefault();

            if (string.IsNullOrEmpty(hair))
                return;

            _profile = _profile.WithCharacterAppearance(_profile.Appearance.WithFacialHairStyleName(hair));
            UpdateHairPickers();
            OnFacialHairUpdated?.Invoke(_profile);
        };

        EyeColorPicker.OnEyeColorPicked += newColor =>
        {
            if (_profile is null)
                return;

            _profile = _profile.WithCharacterAppearance(_profile.Appearance.WithEyeColor(newColor));
            OnEyeColorUpdated?.Invoke(_profile);
        };
    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;
    }

    public void UpdateControls()
    {
        UpdateSkinColorSliders();
        UpdateEyePickers();
        UpdateHairPickers();
    }

    public void OnSkinColorOnValueChanged()
    {
        if (_profile == null)
            return;

        var skin = _prototypeManager.Index(_profile.Species).SkinColoration;
        UpdateSkinColorVisibility(skin);

        var skinColor = skin switch
        {
            HumanoidSkinColor.HumanToned => SkinColor.HumanSkinTone((int)Skin.Value),
            HumanoidSkinColor.Hues => _rgbSkinColorSelector.Color,
            HumanoidSkinColor.TintedHues => SkinColor.TintedHues(_rgbSkinColorSelector.Color),
            HumanoidSkinColor.VoxFeathers => SkinColor.ClosestVoxColor(_rgbSkinColorSelector.Color),
            _ => throw new ArgumentOutOfRangeException(),
        };

        _profile = _profile.WithCharacterAppearance(_profile.Appearance.WithSkinColor(skinColor));
        OnSkinColorUpdated?.Invoke(_profile);
    }

    private void UpdateSkinColorSliders()
    {
        if (_profile == null)
            return;

        var skin = _prototypeManager.Index(_profile.Species).SkinColoration;
        UpdateSkinColorVisibility(skin);

        // TODO: Make this less hardcoded?
        if (_rgbSkinColorSelector.Visible)
        {
            var skinColor = _profile.Appearance.SkinColor;

            if (skin == HumanoidSkinColor.VoxFeathers)
                skinColor = SkinColor.ClosestVoxColor(_profile.Appearance.SkinColor);

            _rgbSkinColorSelector.Color = skinColor;
        }
        else
            Skin.Value = SkinColor.HumanSkinToneFromColor(_profile.Appearance.SkinColor);
    }

    private void UpdateSkinColorVisibility(HumanoidSkinColor skin)
    {
        var useRgb = skin != HumanoidSkinColor.HumanToned;
        Skin.Visible = !useRgb;
        RgbSkinColorContainer.Visible = useRgb;
    }

    private void UpdateEyePickers()
    {
        if (_profile == null)
            return;

        EyeColorPicker.SetData(_profile.Appearance.EyeColor);
    }

    public void UpdateHairPickers()
    {
        UpdateHairPicker();
        UpdateFacialHairPicker();
    }

    private void UpdateHairPicker()
    {
        if (_profile == null)
            return;

        var appearance = _profile.Appearance;
        var hairMarking = new List<Marking>();
        var hairId = appearance.HairStyleId;
        if (hairId != HairStyles.DefaultHairStyle)
        {
            var hair = new Marking(markingId: hairId, markingColors: new() { appearance.HairColor });
            hairMarking.Add(hair);
        }

        HairStylePicker.UpdateData(markings: hairMarking, species: _profile.Species, totalPoints: HairSlots);
    }

    private void UpdateFacialHairPicker()
    {
        if (_profile == null)
            return;

        var appearance = _profile.Appearance;
        var facialHairMarking = new List<Marking>();
        var facialHairId = appearance.FacialHairStyleId;
        if (facialHairId != HairStyles.DefaultFacialHairStyle)
        {
            var hair = new Marking(markingId: facialHairId, markingColors: new() { appearance.FacialHairColor });
            facialHairMarking.Add(hair);
        }

        FacialHairPicker.UpdateData(markings: facialHairMarking, species: _profile.Species, totalPoints: HairSlots);
    }
}
