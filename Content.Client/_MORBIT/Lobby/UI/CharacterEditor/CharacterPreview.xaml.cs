using Content.Client.Humanoid;
using Content.Client.Lobby;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;

#pragma warning disable IDE1006
namespace Content.Client._MORBIT.Lobby.UI.CharacterEditor;
#pragma warning restore IDE1006

[GenerateTypedNameReferences]
public sealed partial class CharacterPreview : BoxContainer
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    private readonly LobbyUIController _controller;
    private readonly HumanoidAppearanceSystem _humanoid = default!;
    private readonly MetaDataSystem _metaData = default!;

    /// <summary>
    /// The work in progress profile being edited.
    /// </summary>
    private HumanoidCharacterProfile? _profile;

    private Direction _previewRotation = Direction.North;

    public Direction PreviewRotation
    {
        get => SpriteView.OverrideDirection ?? Direction.South;
        set
        {
            _previewRotation = value;
            SpriteView.OverrideDirection = (Direction)((int)value % 4 * 2);
        }
    }

    /// <summary>
    /// Entity used for the profile editor preview
    /// </summary>
    public EntityUid PreviewDummy;

    /// <summary>
    /// Temporary override of their selected job, used to preview roles.
    /// </summary>
    public JobPrototype? JobOverride;

    public bool ShowClothes = true;

    public CharacterPreview()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _controller = UserInterfaceManager.GetUIController<LobbyUIController>();
        _humanoid = _entManager.System<HumanoidAppearanceSystem>();
        _metaData = _entManager.System<MetaDataSystem>();

        SpriteRotateLeft.OnPressed += _ => { PreviewRotation = _previewRotation.TurnCw(); };
        SpriteRotateRight.OnPressed += _ => { PreviewRotation = _previewRotation.TurnCcw(); };
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();
        _entManager.DeleteEntity(PreviewDummy);
        PreviewDummy = EntityUid.Invalid;
    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;
    }

    public void SetName(string newName)
    {
        _metaData.SetEntityName(PreviewDummy, newName);
    }

    public void ReloadPreview()
    {
        _entManager.DeleteEntity(PreviewDummy);
        PreviewDummy = EntityUid.Invalid;

        if (_profile == null || !_prototypeManager.HasIndex(_profile.Species))
            return;

        PreviewDummy = _controller.LoadProfileEntity(_profile, JobOverride, ShowClothes);
        SpriteView.SetEntity(PreviewDummy);
        _metaData.SetEntityName(PreviewDummy, _profile.Name);
    }

    /// <summary>
    /// A slim reload that only updates the entity itself and not any of the job entities, etc.
    /// </summary>
    public void ReloadProfilePreview()
    {
        if (_profile == null || !_entManager.EntityExists(PreviewDummy))
            return;

        _humanoid.LoadProfile(PreviewDummy, _profile);
    }
}
