using Content.Client.Lobby.UI.Roles;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.Guidebook;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

#pragma warning disable IDE1006
namespace Content.Client._MORBIT.Lobby.UI.CharacterEditor;
#pragma warning restore IDE1006

[GenerateTypedNameReferences]
public sealed partial class JobPreferenceButtons : BoxContainer
{
    private readonly IPrototypeManager _prototypeManager;
    private readonly JobRequirementsManager _requirements;
    private readonly SpriteSystem _sprite;

    public event Action<List<ProtoId<GuideEntryPrototype>>>? OnOpenGuidebook;
    public event Action<int>? OnPrioritySelected;
    public event Action? OnOpenLoadout;

    public RequirementsSelector Selector => PrioritySelector;

    private const int MinTitleWidth = 200;

    public JobPreferenceButtons(IPrototypeManager prototypeManager,
        JobRequirementsManager requirements,
        SpriteSystem sprite)
    {
        RobustXamlLoader.Load(this);

        _prototypeManager = prototypeManager;
        _requirements = requirements;
        _sprite = sprite;

        PrioritySelector.OnOpenGuidebook += args => { OnOpenGuidebook?.Invoke(args); };
        PrioritySelector.OnSelected += args => { OnPrioritySelected?.Invoke(args); };
    }

    public void Setup(JobPrototype job,
        (string, int)[] items,
        HumanoidCharacterProfile? selectedProfile,
        bool hasLoadout = false)
    {
        var jobIcon = _prototypeManager.Index(job.Icon);
        var iconTexture = _sprite.Frame0(jobIcon.Icon);
        JobIcon.Texture = iconTexture;
        RemoveChild(JobIcon);

        PrioritySelector.Setup(items: items,
            title: job.LocalizedName,
            titleSize: MinTitleWidth,
            description: job.LocalizedDescription,
            icon: JobIcon,
            guides: job.Guides);

        var locked = !_requirements.IsAllowed(job, profile: selectedProfile, out var reason);
        SetLocked(locked, reason);

        LoadoutButton.Disabled = !hasLoadout;
        LoadoutButton.OnPressed += args => { OnOpenLoadout?.Invoke(); };
    }

    public void SetLocked(bool locked, FormattedMessage? requirements = null)
    {
        if (locked)
        {
            if (requirements is not null)
                PrioritySelector.LockRequirements(requirements);
        }
        else
            PrioritySelector.UnlockRequirements();
    }
}
