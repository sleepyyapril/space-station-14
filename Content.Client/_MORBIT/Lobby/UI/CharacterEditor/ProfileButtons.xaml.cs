using System.IO;
using Content.Client.Humanoid;
using Content.Client.Sprite;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.ContentPack;

#pragma warning disable IDE1006
namespace Content.Client._MORBIT.Lobby.UI.CharacterEditor;
#pragma warning restore IDE1006

[GenerateTypedNameReferences]
public sealed partial class ProfileButtons : BoxContainer
{
    [Dependency] private readonly IFileDialogManager _dialogManager = default!;
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly ILogManager _logManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;
    [Dependency] private readonly IResourceManager _resManager = default!;
    private readonly HumanoidAppearanceSystem _humanoid;
    private readonly ISawmill _sawmill;

    public event Action? OnReset;
    public event Action? OnSaved;
    public event Action? OnExportImage;
    public event Action<HumanoidCharacterProfile>? OnProfileImported;

    /// <summary>
    /// The work in progress profile being edited.
    /// </summary>
    private HumanoidCharacterProfile? _profile;

    private bool _isDirty;
    public bool IsDirty
    {
        get => _isDirty;
        set
        {
            if (_isDirty == value)
                return;

            _isDirty = value;
            UpdateButtons();
        }
    }

    private bool _exporting;

    public ProfileButtons()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _humanoid = _entManager.System<HumanoidAppearanceSystem>();
        _sawmill = _logManager.GetSawmill("profile.editor");

        ImportButton.OnPressed += args => { ImportProfile(); };
        ExportButton.OnPressed += args => { ExportProfile(); };
        ExportImageButton.OnPressed += args => { OnExportImage?.Invoke(); };
        OpenImagesButton.OnPressed += args => { _resManager.UserData.OpenOsWindow(ContentSpriteSystem.Exports); };
        ResetButton.OnPressed += args => { OnReset?.Invoke(); };
        SaveButton.OnPressed += args => { OnSaved?.Invoke(); };

        IsDirty = false;
    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;
        UpdateButtons();
    }

    private void UpdateButtons()
    {
        SaveButton.Disabled = _profile is null || !IsDirty;
        ResetButton.Disabled = _profile is null || !IsDirty;
    }

    private async void ImportProfile()
    {
        if (_exporting || _profile == null)
            return;

        StartExport();
        await using var file = await _dialogManager.OpenFile(new FileDialogFilters(new FileDialogFilters.Group("yml")));

        if (file == null)
        {
            EndExport();
            return;
        }

        try
        {
            var profile = _humanoid.FromStream(file, _playerManager.LocalSession!);
            OnProfileImported?.Invoke(profile);
        }
        catch (Exception exc) { _sawmill.Error($"Error when importing profile\n{exc.StackTrace}"); }
        finally { EndExport(); }
    }

    private async void ExportProfile()
    {
        if (_profile == null || _exporting)
            return;

        StartExport();
        var file = await _dialogManager.SaveFile(new FileDialogFilters(new FileDialogFilters.Group("yml")));

        if (file == null)
        {
            EndExport();
            return;
        }

        try
        {
            var dataNode = _humanoid.ToDataNode(_profile);
            await using var writer = new StreamWriter(file.Value.fileStream);
            dataNode.Write(writer);
        }
        catch (Exception exc) { _sawmill.Error($"Error when exporting profile\n{exc.StackTrace}"); }
        finally
        {
            EndExport();
            await file.Value.fileStream.DisposeAsync();
        }
    }

    private void StartExport()
    {
        _exporting = true;
        ImportButton.Disabled = true;
        ExportButton.Disabled = true;
    }

    private void EndExport()
    {
        _exporting = false;
        ImportButton.Disabled = false;
        ExportButton.Disabled = false;
    }
}
