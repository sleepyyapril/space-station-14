using System.Linq;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared.Guidebook;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;
using Robust.Shared.Prototypes;

#pragma warning disable IDE1006
namespace Content.Client._MORBIT.Lobby.UI.CharacterEditor.Tabs;
#pragma warning restore IDE1006

[GenerateTypedNameReferences]
public sealed partial class ProfileEditorAppearanceTab : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public event Action<bool>? OnShowClothes;
    public event Action<HumanoidCharacterProfile>? OnProfileUpdated;
    public event Action<HumanoidCharacterProfile>? OnSkinColorUpdated;
    public event Action<HumanoidCharacterProfile>? OnEyeColorUpdated;
    public event Action<HumanoidCharacterProfile>? OnHairUpdated;
    public event Action<HumanoidCharacterProfile>? OnFacialHairUpdated;
    public event Action<HumanoidCharacterProfile>? OnSpeciesUpdated;
    public event Action<HumanoidCharacterProfile>? OnSexUpdated;
    public event Action<HumanoidCharacterProfile>? OnDirtyUpdated;
    public event Action<List<ProtoId<GuideEntryPrototype>>>? OnOpenGuidebook;

    /// <summary>
    /// The work in progress profile being edited.
    /// </summary>
    private HumanoidCharacterProfile? _profile;

    private List<SpeciesPrototype> _species = new();

    private static readonly ProtoId<GuideEntryPrototype> DefaultSpeciesGuidebook = "Species";
    private const string SpeciesInfoButtonStyle = "SpeciesInfoDefault";

    public ProfileEditorAppearanceTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-male-text"), (int)Gender.Male);
        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-female-text"), (int)Gender.Female);
        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-epicene-text"), (int)Gender.Epicene);
        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-neuter-text"), (int)Gender.Neuter);

        foreach (var value in Enum.GetValues<SpawnPriorityPreference>())
        {
            var prioKey = value.ToString().ToLower();
            var prioText = Loc.GetString($"humanoid-profile-editor-preference-spawn-priority-{prioKey}");
            SpawnPriorityButton.AddItem(prioText, (int)value);
        }

        SexButton.OnItemSelected += args =>
        {
            SexButton.SelectId(args.Id);
            SetSex((Sex)args.Id);
        };

        AgeEdit.OnTextChanged += args =>
        {
            if (!int.TryParse(args.Text, out var newAge))
                return;

            SetAge(newAge);
        };

        PronounsButton.OnItemSelected += args =>
        {
            PronounsButton.SelectId(args.Id);
            SetGender((Gender)args.Id);
        };

        SpeciesButton.OnItemSelected += args =>
        {
            SpeciesButton.SelectId(args.Id);
            SetSpecies(_species[args.Id].ID);
            BodyOptions.UpdateHairPickers();
            BodyOptions.OnSkinColorOnValueChanged();
        };

        SpawnPriorityButton.OnItemSelected += args =>
        {
            SpawnPriorityButton.SelectId(args.Id);
            SetSpawnPriority((SpawnPriorityPreference)args.Id);
        };

        ShowClothes.OnToggled += args => { OnShowClothes?.Invoke(args.Pressed); };
        SpeciesInfoButton.OnPressed += OnSpeciesInfoButtonPressed;

        BodyOptions.OnSkinColorUpdated += p =>
        {
            _profile = p;
            OnSkinColorUpdated?.Invoke(p);
        };

        BodyOptions.OnEyeColorUpdated += p =>
        {
            _profile = p;
            OnEyeColorUpdated?.Invoke(p);
        };

        BodyOptions.OnHairUpdated += p =>
        {
            _profile = p;
            OnHairUpdated?.Invoke(p);
        };

        BodyOptions.OnFacialHairUpdated += p =>
        {
            _profile = p;
            OnFacialHairUpdated?.Invoke(p);
        };

        UpdateSpeciesGuidebookIcon();
        RefreshSpecies();
    }

    private void OnSpeciesInfoButtonPressed(BaseButton.ButtonEventArgs args)
    {
        var species = _profile?.Species ?? SharedHumanoidAppearanceSystem.DefaultSpecies;
        var page = DefaultSpeciesGuidebook;

        // TODO: Make this a field on SpeciesPrototype and use that instead
        if (_prototypeManager.HasIndex<GuideEntryPrototype>(species))
            page = new ProtoId<GuideEntryPrototype>(species.Id);

        OnOpenGuidebook?.Invoke(new() { page });
    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;
        BodyOptions.SetProfile(_profile);
        BodyOptions.UpdateControls();

        UpdateControls();
    }

    private void UpdateControls()
    {
        UpdateSexControls();
        UpdateGenderControls();
        UpdateSpawnPriorityControls();
        UpdateAgeEdit();
        UpdateSpeciesGuidebookIcon();
        RefreshSpecies();
    }

    private void UpdateAgeEdit()
    {
        AgeEdit.Text = _profile?.Age.ToString() ?? "";
    }

    private void UpdateSexControls()
    {
        if (_profile == null)
            return;

        SexButton.Clear();
        var sexes = new List<Sex>();

        // add species sex options, default to just none if we are in bizzaro world and have no species
        if (_prototypeManager.TryIndex(_profile.Species, out var speciesProto))
            foreach (var sex in speciesProto.Sexes)
                sexes.Add(sex);
        else
            sexes.Add(Sex.Unsexed);

        // add button for each sex
        foreach (var sex in sexes)
            SexButton.AddItem(Loc.GetString($"humanoid-profile-editor-sex-{sex.ToString().ToLower()}-text"), (int)sex);

        if (sexes.Contains(_profile.Sex))
            SexButton.SelectId((int)_profile.Sex);
        else
            SexButton.SelectId((int)sexes[0]);
    }

    private void UpdateSpeciesGuidebookIcon()
    {
        SpeciesInfoButton.StyleClasses.Clear();
        var species = _profile?.Species;

        if (species is null)
            return;

        if (!_prototypeManager.TryIndex(species, out var _))
            return;

        // Don't display the info button if no guide entry is found
        if (!_prototypeManager.HasIndex<GuideEntryPrototype>(species))
            return;

        SpeciesInfoButton.StyleClasses.Add(SpeciesInfoButtonStyle);
    }

    private void UpdateGenderControls()
    {
        if (_profile == null)
            return;

        PronounsButton.SelectId((int)_profile.Gender);
    }

    private void UpdateSpawnPriorityControls()
    {
        if (_profile == null)
            return;

        SpawnPriorityButton.SelectId((int)_profile.SpawnPriority);
    }

    /// <summary>
    /// Refreshes the species selector.
    /// </summary>
    public void RefreshSpecies()
    {
        SpeciesButton.Clear();
        _species.Clear();

        _species.AddRange(_prototypeManager.EnumeratePrototypes<SpeciesPrototype>().Where(o => o.RoundStart));
        var speciesIds = _species.Select(o => o.ID).ToList();

        for (var i = 0; i < _species.Count; i++)
        {
            var name = Loc.GetString(_species[i].Name);
            SpeciesButton.AddItem(name, i);

            if (_profile?.Species.Equals(_species[i].ID) == true)
                SpeciesButton.SelectId(i);
        }

        // If our species isn't available then reset it to default.
        if (_profile != null)
        {
            if (!speciesIds.Contains(_profile.Species))
                SetSpecies(SharedHumanoidAppearanceSystem.DefaultSpecies);
        }
    }

    private void SetSpecies(string newSpecies)
    {
        if (_profile is null)
            return;

        _profile = _profile.WithSpecies(newSpecies);
        BodyOptions.SetProfile(_profile);
        BodyOptions.OnSkinColorOnValueChanged();
        UpdateSexControls();
        UpdateSpeciesGuidebookIcon();
        OnSpeciesUpdated?.Invoke(_profile);
    }

    private void SetAge(int newAge)
    {
        if (_profile is null)
            return;

        _profile = _profile.WithAge(newAge);
        OnProfileUpdated?.Invoke(_profile);
    }

    private void SetSex(Sex newSex)
    {
        if (_profile is null)
            return;

        // for convenience, default to most common gender when new sex is selected
        var newGender = newSex switch
        {
            Sex.Male => Gender.Male,
            Sex.Female => Gender.Female,
            _ => Gender.Epicene,
        };

        _profile = _profile.WithSex(newSex).WithGender(newGender);
        UpdateGenderControls();
        OnSexUpdated?.Invoke(_profile);
    }

    private void SetGender(Gender newGender)
    {
        if (_profile is null)
            return;

        _profile = _profile.WithGender(newGender);
        OnDirtyUpdated?.Invoke(_profile);
    }

    private void SetSpawnPriority(SpawnPriorityPreference newSpawnPriority)
    {
        if (_profile is null)
            return;

        _profile = _profile.WithSpawnPriorityPreference(newSpawnPriority);
        OnDirtyUpdated?.Invoke(_profile);
    }
}
