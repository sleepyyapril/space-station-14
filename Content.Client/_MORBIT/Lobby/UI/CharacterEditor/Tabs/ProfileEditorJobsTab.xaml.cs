using System.Linq;
using Content.Client.Lobby;
using Content.Client.Lobby.UI.Roles;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.Clothing;
using Content.Shared.GameTicking;
using Content.Shared.Guidebook;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

#pragma warning disable IDE1006
namespace Content.Client._MORBIT.Lobby.UI.CharacterEditor.Tabs;
#pragma warning restore IDE1006

[GenerateTypedNameReferences]
public sealed partial class ProfileEditorJobsTab : BoxContainer
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;
    [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly JobRequirementsManager _requirements = default!;
    private readonly SpriteSystem _sprite;

    public event Action<HumanoidCharacterProfile?>? OnProfileUpdated;
    public event Action<HumanoidCharacterProfile?>? OnJobUpdated;
    public event Action<JobPrototype?>? OnJobOverride;
    public event Action<List<ProtoId<GuideEntryPrototype>>>? OnOpenGuidebook;

    private const string StayInLobbyLoc = "humanoid-profile-editor-preference-unavailable-stay-in-lobby-button";
    private const string SpawnAsOverflowLoc = "humanoid-profile-editor-preference-unavailable-spawn-as-overflow-button";

    /// <summary>
    /// The work in progress profile being edited.
    /// </summary>
    private HumanoidCharacterProfile? _profile;

    private List<(string, RequirementsSelector)> _jobPriorities = new();
    private readonly Dictionary<string, BoxContainer> _jobCategories = new();

    public ProfileEditorJobsTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sprite = _entManager.System<SpriteSystem>();

        PreferenceUnavailableButton.AddItem(Loc.GetString(StayInLobbyLoc), (int)PreferenceUnavailableMode.StayInLobby);
        PreferenceUnavailableButton.AddItem(Loc.GetString(SpawnAsOverflowLoc,
            ("overflowJob", Loc.GetString(SharedGameTicker.FallbackOverflowJobName))),
            (int)PreferenceUnavailableMode.SpawnAsOverflow);

        PreferenceUnavailableButton.OnItemSelected += args =>
        {
            PreferenceUnavailableButton.SelectId(args.Id);
            _profile = _profile?.WithPreferenceUnavailable((PreferenceUnavailableMode)args.Id);
            OnProfileUpdated?.Invoke(_profile);
        };

    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;

        RefreshJobs();
        RefreshLoadouts();

        if (_profile != null)
            PreferenceUnavailableButton.SelectId((int)_profile.PreferenceUnavailable);
    }

    /// <summary>
    /// Refreshes all job selectors.
    /// </summary>
    public void RefreshJobs()
    {
        JobList.DisposeAllChildren();
        _jobCategories.Clear();
        _jobPriorities.Clear();

        var selectedProfile = (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter;
        var items = new[]
        {
            ("humanoid-profile-editor-job-priority-never-button", (int) JobPriority.Never),
            ("humanoid-profile-editor-job-priority-low-button", (int) JobPriority.Low),
            ("humanoid-profile-editor-job-priority-medium-button", (int) JobPriority.Medium),
            ("humanoid-profile-editor-job-priority-high-button", (int) JobPriority.High),
        };

        foreach (var department in GetDepartments())
        {
            if (!_jobCategories.TryGetValue(department.ID, out var category))
                category = CreateNewCategory(department);

            foreach (var job in GetJobs(department))
            {
                var prefButtons = new JobPreferenceButtons(_prototypeManager, _requirements, _sprite);
                var jobId = LoadoutSystem.GetJobPrototype(job.ID);
                var hasLoadout = _prototypeManager.TryIndex<RoleLoadoutPrototype>(jobId, out var roleLoadout);

                prefButtons.Setup(job, items, selectedProfile, hasLoadout);
                prefButtons.OnOpenGuidebook += args => { OnOpenGuidebook?.Invoke(args); };
                prefButtons.OnPrioritySelected += selectedPrio => { SelectJobPriority(job, selectedPrio); };

                if (hasLoadout && roleLoadout is not null)
                    prefButtons.OnOpenLoadout += () => { OnJobLoadoutPressed(job, jobId, roleLoadout); };

                _jobPriorities.Add((job.ID, prefButtons.Selector));
                category.AddChild(prefButtons);
            }
        }

        UpdateJobPriorities();
    }

    private IEnumerable<DepartmentPrototype> GetDepartments()
    {
        return _prototypeManager.EnumeratePrototypes<DepartmentPrototype>()
            .Where(department => !department.EditorHidden)
            .OrderBy(department => department, DepartmentUIComparer.Instance);
    }

    private IEnumerable<JobPrototype> GetJobs(DepartmentPrototype department)
    {
        return department.Roles
            .Select(jobId => _prototypeManager.Index(jobId))
            .Where(job => job.SetPreference)
            .OrderBy(job => job, JobUIComparer.Instance);
    }

    private BoxContainer CreateNewCategory(DepartmentPrototype department)
    {
        var departmentName = Loc.GetString(department.Name);
        var category = new BoxContainer
        {
            Orientation = LayoutOrientation.Vertical,
            Name = department.ID,
            ToolTip = Loc.GetString("humanoid-profile-editor-jobs-amount-in-department-tooltip",
                ("departmentName", departmentName)),
        };

        var categoryHeadingLabel = new Label
        {
            Text = Loc.GetString("humanoid-profile-editor-department-jobs-label",
                ("departmentName", departmentName)),
            Margin = new Thickness(5f, 0, 0, 0),
        };

        category.AddChild(new PanelContainer
        {
            PanelOverride = new StyleBoxFlat { BackgroundColor = Color.FromHex("#464966") },
            Children = { categoryHeadingLabel },
        });

        _jobCategories[department.ID] = category;
        JobList.AddChild(category);

        return category;
    }

    /// <summary>
    /// Syncs selected job priorities to the profile's.
    /// </summary>
    private void UpdateJobPriorities()
    {
        foreach (var (jobId, prioritySelector) in _jobPriorities)
        {
            var priority = _profile?.JobPriorities.GetValueOrDefault(jobId, JobPriority.Never) ?? JobPriority.Never;
            prioritySelector.Select((int)priority);
        }
    }

    private void SelectJobPriority(JobPrototype job, int priority)
    {
        var selectedJobPrio = (JobPriority)priority;
        _profile = _profile?.WithJobPriority(job.ID, selectedJobPrio);

        foreach (var (jobId, other) in _jobPriorities)
        {
            if (jobId == job.ID)
            {
                other.Select(priority);
                continue;
            }

            if (selectedJobPrio != JobPriority.High || (JobPriority)other.Selected != JobPriority.High)
                continue;

            other.Select((int)JobPriority.Medium);
            _profile = _profile?.WithJobPriority(jobId, JobPriority.Medium);
        }

        UpdateJobPriorities();
        OnJobUpdated?.Invoke(_profile);
    }
}
