using System.Diagnostics.CodeAnalysis;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

#pragma warning disable IDE1006
namespace Content.Client._MORBIT.Lobby.UI.CharacterEditor.Tabs;
#pragma warning restore IDE1006

[GenerateTypedNameReferences]
public sealed partial class ProfileEditorMarkingsTab : BoxContainer
{
    [Dependency] private readonly MarkingManager _markingManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public Action<MarkingSet>? OnMarkingAdded;
    public Action<MarkingSet>? OnMarkingRemoved;
    public Action<MarkingSet>? OnMarkingColorChange;
    public Action<MarkingSet>? OnMarkingRankChange;

    /// <summary>
    /// The work in progress profile being edited.
    /// </summary>
    private HumanoidCharacterProfile? _profile;

    public ProfileEditorMarkingsTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Markings.OnMarkingAdded += args => { OnMarkingAdded?.Invoke(args); };
        Markings.OnMarkingRemoved += args => { OnMarkingRemoved?.Invoke(args); };
        Markings.OnMarkingColorChange += args => { OnMarkingColorChange?.Invoke(args); };
        Markings.OnMarkingRankChange += args => { OnMarkingRankChange?.Invoke(args); };
    }

    public void SetProfile(HumanoidCharacterProfile? profile)
    {
        _profile = profile;
    }

    public void UpdateProfile()
    {
        UpdateEyePickers();
        UpdateMarkings();
        UpdateHair();
        UpdateFacialHair();
    }

    public void SetSkinColor(Color skinColor)
    {
        Markings.SetSkinColor(skinColor);
    }

    public void SetEyeColor(Color skinColor)
    {
        Markings.SetEyeColor(skinColor);
    }

    public void SetSpecies(string species)
    {
        Markings.SetSpecies(species);
    }

    public void SetSex(Sex sex)
    {
        Markings.SetSex(sex);
    }

    public void UpdateHair()
    {
        Markings.HairMarking = null;
        var markingId = _profile?.Appearance.HairStyleId;
        var color = _profile?.Appearance.HairColor;

        if (markingId == null
            || color == null
            || markingId == HairStyles.DefaultHairStyle
            || !TryGetMarking(markingId,
                markingColor: color.Value,
                layer: HumanoidVisualLayers.Hair,
                out var marking))
            return;

        Markings.HairMarking = marking;
    }

    public void UpdateFacialHair()
    {
        Markings.FacialHairMarking = null;
        var markingId = _profile?.Appearance.FacialHairStyleId;
        var color = _profile?.Appearance.FacialHairColor;

        if (markingId == null
            || color == null
            || markingId == HairStyles.DefaultFacialHairStyle
            || !TryGetMarking(markingId,
                markingColor: color.Value,
                layer: HumanoidVisualLayers.FacialHair,
                out var marking))
            return;

        Markings.FacialHairMarking = marking;
    }

    private bool TryGetMarking(string markingId,
        Color markingColor,
        HumanoidVisualLayers layer,
        [NotNullWhen(true)] out Marking? marking)
    {
        marking = null;

        if (_profile == null
            || !_markingManager.Markings.TryGetValue(markingId, out var hairProto)
            || !_markingManager.CanBeApplied(_profile.Species, _profile.Sex, hairProto, _prototypeManager))
            return false;

        var mustMatchSkin = _markingManager.MustMatchSkin(species: _profile.Species,
            layer: layer,
            out var _,
            _prototypeManager);
        var color = mustMatchSkin ? _profile.Appearance.SkinColor : markingColor;

        marking = new Marking(markingId, markingColors: new List<Color>() { color });
        return true;
    }

    private void UpdateMarkings()
    {
        if (_profile == null)
            return;

        Markings.SetData(_profile.Appearance.Markings,
            _profile.Species,
            _profile.Sex,
            _profile.Appearance.SkinColor,
            _profile.Appearance.EyeColor);
    }

    private void UpdateEyePickers()
    {
        if (_profile == null)
            return;

        Markings.CurrentEyeColor = _profile.Appearance.EyeColor;
    }
}
